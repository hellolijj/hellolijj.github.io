<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joshua&#39;s blog</title>
    <link>https://hellolijj.github.io/</link>
    <description>Recent content on Joshua&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 27 Jun 2019 21:00:04 +0800</lastBuildDate>
    
	<atom:link href="https://hellolijj.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gpu Topolgy Scheduler Design</title>
      <link>https://hellolijj.github.io/post/k8s/gosc-design/gpu_topolgy_design/</link>
      <pubDate>Thu, 27 Jun 2019 21:00:04 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/gosc-design/gpu_topolgy_design/</guid>
      <description>gsoc 设计文档更新版。 目标 当一个机器学习任务使用到 n 块 gpu 卡时，可根据 gpu 之间的拓扑，选择亲和性强的 gpu 完成任务。 非目标 节点内部的 亲和性除了 gpu 与 gpu 之间</description>
    </item>
    
    <item>
      <title>How to Write Gsoc Proposal</title>
      <link>https://hellolijj.github.io/post/k8s/how-to-write-gsoc-proposal/</link>
      <pubDate>Wed, 26 Jun 2019 11:48:09 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/how-to-write-gsoc-proposal/</guid>
      <description>对于写prosal，需要准备搜集很多材料。例如 背景、todolist、proposal 模版等。而实际上 gsoc proposal 是需要提前跟 mentor 联系的。只要跟 mentor 商量</description>
    </item>
    
    <item>
      <title>Gsoc Think List</title>
      <link>https://hellolijj.github.io/post/k8s/gsoc-think-list/</link>
      <pubDate>Wed, 26 Jun 2019 11:22:01 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/gsoc-think-list/</guid>
      <description>很幸运参加了 2019 年的 GSoC， 这是我第一次做类似的事情，特地写系列博客记录这两个月的学习成果。 项目名称 Kubernetes with hardware devices topology awareness at node level 在 kubernestes</description>
    </item>
    
    <item>
      <title>What Happen Defer Behind Request Closely</title>
      <link>https://hellolijj.github.io/post/go/what-happen-defer-behind-request-closely/</link>
      <pubDate>Tue, 21 May 2019 18:37:42 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/go/what-happen-defer-behind-request-closely/</guid>
      <description>今天遇到了一个问题，前前后后调试了一个下午。特此记录一下。 源代码如下： resp, err := client.post(ctx, &amp;quot;/containers/prune&amp;quot;, q, nil, nil) defer resp.Body.Close() if err != nil { return nil, err } 这段代码乍得一看，也没有什么问题</description>
    </item>
    
    <item>
      <title>How to Delete Branch</title>
      <link>https://hellolijj.github.io/post/git/how-to-delete-branch/</link>
      <pubDate>Tue, 21 May 2019 17:40:16 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/git/how-to-delete-branch/</guid>
      <description>在使用 git 的过程中经常有删除分支的需求。这个命令老是爱忘记，特地记录一下。 # 删除远程分支 $ git push origin --delete dev-container-prune # 删除本机的分支 $ git branch -D dev-container-prune</description>
    </item>
    
    <item>
      <title>Node Topology Manager</title>
      <link>https://hellolijj.github.io/post/k8s/node-topology-manager/</link>
      <pubDate>Mon, 20 May 2019 15:43:14 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/node-topology-manager/</guid>
      <description>今年暑假我报了一个谷歌编程之夏的项目。 方向：https://github.com/cncf/soc#kubernetes-with-hard</description>
    </item>
    
    <item>
      <title>Pouch Dev Note (1)</title>
      <link>https://hellolijj.github.io/post/k8s/pouch-dev-note-1/pouch-dev-note-1/</link>
      <pubDate>Fri, 17 May 2019 20:14:50 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/pouch-dev-note-1/pouch-dev-note-1/</guid>
      <description>Pouch 开发笔记 最近突然发现阿里巴巴推出了一个 SOC2019 的项目，也就是阿里巴巴编程之夏。这是他们第一次搞，这是在向谷歌编程之夏（GSOC）学习。由于对这个</description>
    </item>
    
    <item>
      <title>Kube Scheduler Source Analysis</title>
      <link>https://hellolijj.github.io/post/k8s/kube-scheduler-source-analysis/</link>
      <pubDate>Sun, 12 May 2019 14:13:04 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/kube-scheduler-source-analysis/</guid>
      <description>kube-scheduler 源码分析 网上有很多 kubernetes 源码分析的博客。但是，我的源码分析记录我的思考和跟别人不一样的地方。 对于很多人来说，对于 kube-scheduler 来说，很多人只能说出预选和优</description>
    </item>
    
    <item>
      <title>What Does Daemon Do？</title>
      <link>https://hellolijj.github.io/post/k8s/what-does-daemon-do/what-does-daemon-do/</link>
      <pubDate>Sat, 11 May 2019 15:45:20 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/what-does-daemon-do/what-does-daemon-do/</guid>
      <description>pouch daemon 位于daemon这个包内。 pouch daemon是pouch的守护进程，这里也可以看出，daemon 由crtd(containerd)、cont</description>
    </item>
    
    <item>
      <title>What Happen Pouchd</title>
      <link>https://hellolijj.github.io/post/k8s/what-happen-pouchd/what-happen-pouchd/</link>
      <pubDate>Fri, 10 May 2019 17:07:11 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/what-happen-pouchd/what-happen-pouchd/</guid>
      <description>pouch 分为 客户端和服务端。服务端端启动 通过 pouchd 实现。可以使用如下参数： 参考：http://pouchcontainer.io/#/pouch/do</description>
    </item>
    
    <item>
      <title>Pouch Test Dev</title>
      <link>https://hellolijj.github.io/post/k8s/pouch-test-dev/</link>
      <pubDate>Fri, 10 May 2019 15:52:28 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/pouch-test-dev/</guid>
      <description>对于一个开源项目来说，了解它的测试流程，搭建测试环境是对理解代码有一定好处的。本文参照 pouch 测试文档，搭建测试环境，记录此过程中的一点思考。 pouch 测</description>
    </item>
    
    <item>
      <title>How to Merge Commits</title>
      <link>https://hellolijj.github.io/post/git/how-to-merge-commits/how-to-merge-commits/</link>
      <pubDate>Tue, 30 Apr 2019 20:06:14 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/git/how-to-merge-commits/how-to-merge-commits/</guid>
      <description>背景，做一个小demo，写了十几个commits ，其实最终只要上传一个commits就可以。 那么如何将这些commit 合并成一个commit</description>
    </item>
    
    <item>
      <title>Pouch First Touch</title>
      <link>https://hellolijj.github.io/post/k8s/pouch-first-touch/</link>
      <pubDate>Tue, 30 Apr 2019 16:19:41 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/pouch-first-touch/</guid>
      <description>看了亮哥的《docker源码分析》热情澎湃，但是自己远没有这个能力。自从上次被面试后，一改之前的学习表面，学习特性的态度。今天对着 pouch 开源项目</description>
    </item>
    
    <item>
      <title>Docker Element Knowledge</title>
      <link>https://hellolijj.github.io/post/k8s/docker-element-knowledge/docker-element-knowledge/</link>
      <pubDate>Mon, 29 Apr 2019 11:35:14 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/docker-element-knowledge/docker-element-knowledge/</guid>
      <description>@(1.1 kubernetes)[容器] &amp;gt; 大家都知道容器技术实际上就是运用了linux3.10版本以上的 cgroup、namespaces功能。那么</description>
    </item>
    
    <item>
      <title>Why Docker Was So Hot</title>
      <link>https://hellolijj.github.io/post/k8s/why-docker-so-hot/</link>
      <pubDate>Thu, 25 Apr 2019 16:45:32 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/why-docker-so-hot/</guid>
      <description>学习原文：https://time.geekbang.org/column/article/14254 这篇文章介绍了docker干掉 Cloud Fou</description>
    </item>
    
    <item>
      <title>带着问题去学习系列：《深入剖析kuberntes》</title>
      <link>https://hellolijj.github.io/post/k8s/why-k8s-be-no.1/</link>
      <pubDate>Thu, 25 Apr 2019 13:40:47 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/k8s/why-k8s-be-no.1/</guid>
      <description>原文：https://time.geekbang.org/column/article/14252 问题一：为什么kuberntes能打败do</description>
    </item>
    
    <item>
      <title>闲谈【听君一席话，胜读十年书】</title>
      <link>https://hellolijj.github.io/life/chat01/</link>
      <pubDate>Thu, 25 Apr 2019 10:42:13 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/life/chat01/</guid>
      <description>0 背景 如今是4月下旬，身边的同学大多都找到了实习工作，其中不乏去BAT等国内一线互联网公司的。这个时候，实验室才老师问我是否对阿里的pouc</description>
    </item>
    
    <item>
      <title>hugo 发布第一篇博客	</title>
      <link>https://hellolijj.github.io/post/hugo/start-first-blog/</link>
      <pubDate>Mon, 08 Apr 2019 09:40:03 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/hugo/start-first-blog/</guid>
      <description>按照网上大多数的博客，可以很快使用 hugo 创建一个个人博客静态网站。甚至支持自定义选择皮肤、上传至github，使用github的pages功能构</description>
    </item>
    
    <item>
      <title>Hugo构建静态网站</title>
      <link>https://hellolijj.github.io/post/hugo/hugo-install-website/</link>
      <pubDate>Tue, 09 Oct 2018 19:00:25 +0800</pubDate>
      
      <guid>https://hellolijj.github.io/post/hugo/hugo-install-website/</guid>
      <description>3.4.1 hugo构建静态网站 @(3.4 hugo)[blog, 个人网站] 一些资料汇总 hugo官方网站：https://gohugo.io hugo官方中文文档：http://ww</description>
    </item>
    
  </channel>
</rss>